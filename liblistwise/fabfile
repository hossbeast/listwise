##
## variables
##
LIB			= [ liblistwise.so ]		# name of the library
CC			= [ gcc ]
FLEX		= [ flex ]
BISON		= [ bison ]
CFLAGS	= [ -m64 -O3 -Werror -D_GNU_SOURCE -fPIC [ $# ] =>> lsr/xm/<h>/rp/dn/ss/u/s/^/-I ]
LFLAGS	= [ -lpcre -ldl -shared -Wl,--version-script=exports [ -Wl,-soname,- $LIB ] =>> j ]

SRCDIR	= [ $# ] 								# directory this makefile resides in
DESTDIR	= [ / ]									# directory to install to
INCDIR	= [ usr/include ]				# directory for .h's
LIBDIR	= [ usr/lib ]						# directory for .so's
DLIBDIR	= [ usr/lib ]						# directory for dloaded .so's (the operators)

# path to each operator so
OPLIST	= [ $SRCDIR ] =>> s/$/\/op/lsr/m/</op\.c>/v/xs/<c>/<so>/y

##
## dependencies
##

# default NOFILE target - build library and all operators
all : [ $LIB $OPLIST ]

# library depends on .o for each c, l, and y
[ $LIB ] : [ $SRCDIR ] =>> lsr/m/</op/[^/]+/>/v/xs/<c>/<o>/y
[ $LIB ] : [ $SRCDIR ] =>> lsr/xs/<l>/<lex.o>/y
[ $LIB ] : [ $SRCDIR ] =>> lsr/xs/<y>/<tab.o>/y

[ $LIB ] : [ exports ]

#[ generator/generator.o ] : [ generator/generator.lex.h ]
#[ generator/generator.o ] : [ generator/generator.tab.h ]

#[ generator/generator.lex.o ] : [ generator/generator.lex.c generator/generator.lex.h generator/generator.tab.h ]
#[ generator/generator.lex.c ] : [ generator/generator.l ]
#[ generator/generator.lex.h ] : [ generator/generator.l ]
#[ generator/generator.tab.o ] : [ generator/generator.tab.c generator/generator.tab.h ]
#[ generator/generator.tab.c ] : [ generator/generator.y ]
#[ generator/generator.tab.h ] : [ generator/generator.y ]

#[ lstack/lstack.o ]		: [ common/xmem.o ]
#[ re/re.o ]						: [ common/xmem.o ]
#[ op/op.o ]						: [ common/xmem.o ]
#[ object/object.o ]		: [ common/xmem.o common/xmem.o ]
#[ op/cp/cp.so ]				: [ common/xmem.o ]
#[ op/s/s.so ]					: [ common/xmem.o common/parseint.o ]
#[ op/u/u.so ]					: [ common/xmem.o common/xstring.o ]
#[ op/ss/ss.so ]				: [ common/xmem.o common/xstring.o ]
#[ op/sn/sn.so ]				: [ common/xmem.o common/parseint.o ]

# operator .so depends on its .o
#[ $OPLIST ] =>> dj/shift :: [ $< ] =>> rx/xs/<o>

# each .o depends on its .c
#[ $SRCDIR ] =>> lsr/xs/<c>/<o>/y/dj/shift/pop :: [ $< ] =>> rx/xs/<c>

##
## formulas
##

# link the library
[ $LIB ] :
{
	[ $CC $CFLAGS -o $@ [ $@ ] =>> rx/aneed/xm/<o>/ss/u $LFLAGS ]
}

# library exports
[ exports ] :
{
	  exec 1>[ $@ ]
	  echo "{ global: "
	> sed 's/.*API\(DATA\)\?[[:space:]]\+\([a-zA-Z][0-9a-zA-Z_]*\).*/\2;/p; d' <(\
	  cat -- [ $SRCDIR ] =>> lsr/m/</op/[^/]+/>/v/xm/<c> )
	> echo "local: *; };"
}

# link an operator so
[ $OPLIST ] =>> dj/shift :: [ $< ] =>> rx/xs/<o>
{
	[ $CC $CFLAGS -o $@ [ $@ ] =>> rx/aneed/xm/<o>/ss/u ]			\
	[ -L. $SRCDIR ] =>> j																			\
	[ -llistwise -shared ]																		\
	[ -Wl,-soname, [ $@ ] =>> rx/bn/fn .so ] =>> j
}

# dependency discovery for .o files
[ $SRCDIR ] =>> lsr/xs/<c>/<o>/y/ss/u ~
{
	[ $CC $CFLAGS ] -MM -MP -MG -MT [ $@ ] [ $@ ] =>> rx/xs/<o>/<c>	| gcc-dep
}

# compile .o from .c
[ $SRCDIR ] =>> lsr/xs/<c>/<o>/y/dj/shift/pop :: [ $< ] =>> rx/xs/<c>
{
	[ $CC $CFLAGS ] -c [ $@ ] =>> rx/ineed/xm/<c>/ss/u -o [ $@ ]
}

# compile .o from .lex.c
[ $SRCDIR ] =>> lsr/xs/<l>/<lex.o>/y/dj/shift/pop :: [ $< ] =>> rx/xs/<lex.c>
{
	[ $CC $CFLAGS ] -c [ $@ ] =>> rx/ineed/xm/<c>/ss/u -o [ $@ ]
}

# compile .o from .tab.c
[ $SRCDIR ] =>> lsr/xs/<y>/<tab.o>/y/dj/shift/pop :: [ $< ] =>> rx/xs/<tab.c>
{
	[ $CC $CFLAGS ] -c [ $@ ] =>> rx/ineed/xm/<c>/ss/u -o [ $@ ]
}

# flex - create .lex.c and .lex.h from a .l
[ $SRCDIR ] =>> lsr/xs/<l>/lex.c/y/v/d/cp/u/xs/lex.c/lex.h/z/v/dj/2/shift/pop/2 :: [ $< ] =>> rx/xs/<l>/ss/u
{
	[ $FLEX -o [ $@ ] =>> h/1/1/rx ]									\
	[ --header-file= [ $@ ] =>> h/0/1/rx ] =>> j			\
	[ $@ ] =>> rx/ineed/xm/<l>/ss/u
}

# bison - create .tab.c and .tab.h from a .y
[ $SRCDIR ] =>> lsr/xs/<y>/tab.c/y/v/d/cp/u/xs/tab.c/tab.h/z/v/dj/2/shift/pop/2 :: [ $< ] =>> rx/xs/<y>/ss/u
{
	[ $BISON --warnings=error -o ]		\
	[ $@ ] =>> h/1/1									\
	[ -d ]														\
	[ $@ ] =>> rx/ineed/xm/<y>/ss/u
}

##
## tasks
##

install : [ /../all ]
{
	install -d																				[ $DESTDIR / $LIBDIR ] =>> j
	install	[ $SRCDIR / $LIB ] =>> j									[ $DESTDIR / $LIBDIR / $LIB .0.1 ] =>> j
	ln -vfs [ $LIB .0.1 ] =>> j 											[ $DESTDIR / $LIBDIR / $LIB ] =>> j
	install -d																				[ $DESTDIR / $INCDIR ] =>> j
	install -d																				[ $DESTDIR / $INCDIR /listwise ] =>> j
	install [ $SRCDIR /listwise.h	] =>> j							[ $DESTDIR / $INCDIR /listwise.h ] =>> j
	install [ $SRCDIR /listwise/operator.h ] =>> j		[ $DESTDIR / $INCDIR /listwise/operator.h ] =>> j
	install [ $SRCDIR /listwise/generator.h	] =>> j		[ $DESTDIR / $INCDIR /listwise/generator.h ] =>> j
	install [ $SRCDIR /listwise/ops.h ] =>> j					[ $DESTDIR / $INCDIR /listwise/ops.h ] =>> j
	install [ $SRCDIR /listwise/lstack.h ] =>> j			[ $DESTDIR / $INCDIR /listwise/lstack.h ] =>> j
	install [ $SRCDIR /listwise/object.h ] =>> j			[ $DESTDIR / $INCDIR /listwise/object.h ] =>> j

	install -d																				[ $DESTDIR / $DLIBDIR /listwise ] =>> j
	for x in [ $OPLIST ]; do \
		install $x																			[ $DESTDIR / $DLIBDIR /listwise ] =>> j
	done
}

uninstall
{
	rm -f																							[ $DESTDIR / $LIBDIR  / $LIB .0.1 ] =>> j
	rm -f																							[ $DESTDIR / $LIBDIR  / $LIB ] =>> j
	rm -rf																						[ $DESTDIR / $DLIBDIR /listwise ] =>> j
	rm -f																							[ $DESTDIR / $INCDIR  /listwise.h ] =>> j
}

clean
{
	find [ $SRCDIR ] -name *.o -delete
	find [ $SRCDIR ] -name *.so -delete
	find [ $SRCDIR ] -name *.lex.* -delete
	find [ $SRCDIR ] -name *.tab.* -delete
	find [ $SRCDIR ] -name exports -delete
}
